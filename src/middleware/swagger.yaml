openapi: 3.0.0
info:
  version: 1.0.0
  title: Kollsh API
  description: ""
  termsOfService: "https://kollsh.com/trams-service"
  contact:
    name: Ibrahim Sifat
    email: ibrahimsifat.me@gmail.com
    url: "https://ibrahimsifat.me"
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  x-generation-date: "2023-06-18T17:15:24.085Z"
servers:
  - description: SwaggerHub API Auto Mocking
    url: "http://localhost:4000/api/v1/"
paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Returns ok
      responses:
        "200":
          description: Returns ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: string
                    enum:
                      - "true"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/local:
    post:
      tags:
        - Auth
      summary: Local login
      description: Returns a jwt token and user info
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                password:
                  type: string
            example:
              identifier: username or email
              password: Test1234
        required: true
      responses:
        "200":
          description: Connection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegistration"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/local/register:
    post:
      tags:
        - Auth
      summary: Register a user
      description: Returns a jwt token and user info
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
            example:
              username: thisisname
              email: user@kollosh.com
              password: Test1234
        required: true
      responses:
        "200":
          description: Successfull registration
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegistration"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Send rest password email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
            example:
              email: user@kollsh.com
      responses:
        "200":
          description: Returns ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: string
                    enum:
                      - "true"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Rest user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                passwordConfirmation:
                  type: string
                code:
                  type: string
            example:
              password: Test1234
              passwordConfirmation: Test1234
              code: zertyoaizndoianzodianzdonaizdoinaozdnia
      responses:
        "200":
          description: Returns a jwt token and user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegistration"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/change-password:
    post:
      tags:
        - Auth
      summary: Update user's own password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - currentPassword
                - passwordConfirmation
              properties:
                password:
                  type: string
                currentPassword:
                  type: string
                passwordConfirmation:
                  type: string
      responses:
        "200":
          description: Returns a jwt token and user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegistration"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/send-email-confirmation:
    post:
      tags:
        - Auth
      summary: Send confirmation email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Returns email and boolean to confirm email was sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  sent:
                    type: string
                    enum:
                      - "true"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/email-confirmation:
    get:
      tags:
        - Auth
      summary: Confirm user email
      parameters:
        - in: query
          name: confirmation
          schema:
            type: string
          description: confirmation token received by email
      responses:
        "301":
          description: Redirects to the configure email confirmation redirect url
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /items:
    get:
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item

      operationId: get/items
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
  "/items/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/items/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/items/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/items/{id}"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
    delete:
      responses:
        "204":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/items/{id}"
  "/items/:id/comments":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationLimit"
      operationId: "get/items/:id/comments"
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      security:
        - bearerAuth: []
      parameters: []
      operationId: "post/items/{id}/comments"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
  "/items/{id}/author":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/items/{id}/author"
  /items-details:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsDetailListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Items-details
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/items-details
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsDetailResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Items-detail
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/items-details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemsDetailRequest"
  "/items-details/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsDetailResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Items-detail
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/items-details/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsDetailResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Items-detail
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/items-details/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemsDetailRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Items-detail
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/items-details/{id}"
  /attributes:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/attributes
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/attributes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeRequest"
  "/attributes/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/attributes/{id}"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/attributes/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/attributes/{id}"
  /attribute-categories:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeCategoryListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-category
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/attribute-categories
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeCategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-category
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/attribute-categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeCategoryRequest"
  "/attribute-categories/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeCategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-category
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/attribute-categories/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeCategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-category
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/attribute-categories/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeCategoryRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-category
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/attribute-categories/{id}"
  /attribute-values:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeValueListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-value
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/attribute-values
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeValueResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-value
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/attribute-values
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeValueRequest"
  "/attribute-values/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeValueResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-value
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/attribute-values/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeValueResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-value
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/attribute-values/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeValueRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-value
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/attribute-values/{id}"
  /brands:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Brand
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/brands
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Brand
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/brands
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandRequest"
  "/brands/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Brand
      parameters:
        - name: id
          in: path
          description: ""
          deprecated: false
          required: true
          schema:
            type: number
      operationId: "get/brands/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Brand
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/brands/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Brand
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/brands/{id}"
  /categories:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Category
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/categories
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Category
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequest"
  "/categories/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Category
      parameters:
        - name: id
          in: path
          description: ""
          deprecated: false
          required: true
          schema:
            type: number
      operationId: "get/categories/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Category
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/categories/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Category
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/categories/{id}"
  /cities:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CityListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - City
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/cities
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CityResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - City
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/cities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CityRequest"
  "/cities/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CityResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - City
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/cities/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CityResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - City
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/cities/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CityRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - City
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/cities/{id}"
  /comments:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Comment
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/comments
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Comment
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
  "/comments/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Comment
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/comments/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Comment
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/comments/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Comment
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/comments/{id}"
  /countries:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountryListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Country
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/countries
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Country
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/countries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CountryRequest"
  "/countries/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Country
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/countries/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Country
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/countries/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CountryRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Country
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/countries/{id}"
  /replays:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplayListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Replay
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/replays
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplayResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Replay
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/replays
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplayRequest"
  "/replays/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplayResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Replay
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/replays/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplayResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Replay
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/replays/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplayRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Replay
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ""
          deprecated: false
          required: true
          schema:
            type: number
      operationId: "delete/replays/{id}"
  /subcategories:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubcategoryListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Subcategory
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/subcategories
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubcategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Subcategory
      parameters: []
      operationId: post/subcategories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubcategoryRequest"
  "/subcategories/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubcategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Subcategory
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/subcategories/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubcategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Subcategory
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/subcategories/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubcategoryRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Subcategory
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/subcategories/{id}"
  /states:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - State
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/states
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - State
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/states
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateRequest"
  "/states/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - State
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/states/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - State
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/states/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - State
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/states/{id}"
  /users:
    get:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Get list of users
      responses:
        "200":
          description: Returns an array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDTO"
              example:
                - $ref: "#/components/schemas/UserDTO"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - User
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
            example:
              username: ibrahim
              email: hello@kollsh.com
              password: password
      responses:
        "201":
          description: Returns created user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                $ref: "#/components/schemas/UserDTO"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  "/users/{id}":
    get:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Get a user
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Returns a user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                $ref: "#/components/schemas/UserDTO"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Update a user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
            example:
              username: username
              email: user@kollsh.com
              password: Password
      responses:
        "200":
          description: Returns updated user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                $ref: "#/components/schemas/UserDTO"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Delete a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: user Id
      responses:
        "200":
          description: Returns deleted user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                $ref: "#/components/schemas/UserDTO"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/me:
    get:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Get authenticated user info
      responses:
        "200":
          description: Returns user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                $ref: "#/components/schemas/UserDTO"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /upload/files:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadFileListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Upload - File
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/upload/files
  "/upload/files/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadFileResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Upload - File
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/upload/files/{id}"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - UploadFile
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/upload/files/{id}"
  /item-suggestions:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemSuggestionListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-suggestion
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/item-suggestions
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemSuggestionResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-suggestion
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/item-suggestions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemSuggestionRequest"
  "/item-suggestions/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemSuggestionResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-suggestion
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/item-suggestions/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemSuggestionResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-suggestion
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/item-suggestions/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemSuggestionRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-suggestion
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/item-suggestions/{id}"
  /metadatas:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Metadata
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/paginationLimit"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/filters"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/metadatas
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Metadata
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/seos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataRequest"
  "/metadatas/{id}":
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Metadata
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/seos/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Metadata
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/seos/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataRequest"
    delete:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: integer
                format: int64
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Metadata
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/metadatas/{id}"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      required:
        - error
      properties:
        data:
          oneOf:
            - type: object
            - type: array
              items:
                type: object
        error:
          type: object
          properties:
            status:
              type: integer
            name:
              type: string
            message:
              type: string
            details:
              type: object
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        createdBy:
          type: object
          properties:
            data:
              type: object
              properties:
                userId:
                  type: number
        updatedBy:
          type: object
          properties:
            data:
              type: object
              properties:
                userId:
                  type: number
      required:
        - createdAt
        - updatedAt
    Image:
      type: object
      properties:
        id:
          type: number
        name:
          type: string
        alternativeText:
          type: string
        caption:
          type: string
        width:
          type: integer
        height:
          type: integer
        formats: {}
        size:
          type: number
          format: float
        url:
          type: string
        previewUrl:
          type: string
    UserDTO:
      type: object
      properties:
        id:
          type: number
          example: 1
        username:
          type: string
          example: username
        email:
          type: string
          example: username@kullosh.com
        avatar:
          type: string
          example: "https://kollsh.com/image"
        confirmed:
          type: boolean
          example: false
        blocked:
          type: boolean
          example: false
        createdAt:
          type: string
          format: date-time
          example: "2022-06-02T08:32:06.258Z"
        updatedAt:
          type: string
          format: date-time
          example: "2022-06-02T08:32:06.267Z"
      required:
        - id
        - name
    Pagination:
      type: object
      properties:
        page:
          type: integer
        pageSize:
          type: integer
          minimum: 25
        pageCount:
          type: integer
          maximum: 1
        nextPage:
          type: string
        prevPage:
          type: string
        totalPage:
          type: integer
        totalItems:
          type: integer
    ArrayTypeRelationId:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                type: number
              data:
                type: object
                properties: {}
    ObjectTypeRelationId:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              type: number
            data:
              type: object
              properties: {}
    User:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        resetPasswordToken:
          type: string
        confirmationToken:
          type: string
        confirmed:
          type: boolean
        blocked:
          type: boolean
        role:
          type: object
        items:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties:
                  id:
                    type: number
                  data:
                    type: object
                    properties: {}
        comments:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties: {}
        replays:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties: {}
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/UsersResponseDataObject"
        meta:
          type: object
    UsersResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/User"
    UserRegistration:
      type: object
      properties:
        jwt:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
        user:
          $ref: "#/components/schemas/UserDTO"
    Item:
      allOf:
        - type: object
          required:
            - negotiable
          properties:
            name:
              type: string
            description:
              type: string
            released:
              type: string
              format: date
            thumbnail:
              $ref: "#/components/schemas/Image"
            slug:
              type: string
            subcategory:
              $ref: "#/components/schemas/SubcategoryResponseDataObject"
            state:
              $ref: "#/components/schemas/ObjectTypeRelationId"
            cities:
              $ref: "#/components/schemas/ArrayTypeRelationId"
            price:
              type: integer
            negotiable:
              type: boolean
            is_argent:
              type: boolean
            brand:
              $ref: "#/components/schemas/ObjectTypeRelationId"
            saller:
              $ref: "#/components/schemas/ObjectTypeRelationId"
            comments:
              $ref: "#/components/schemas/CommentResponseDataObject"
            details:
              $ref: "#/components/schemas/ItemsDetailResponseDataObject"
        - $ref: "#/components/schemas/MetadataResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    ItemRequest:
      type: object
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            description:
              type: string
            released:
              type: string
              format: date
            thumbnail:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            slug:
              type: string
            subcategory:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            state:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            cities:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            price:
              type: integer
            negotiable:
              type: boolean
            is_argent:
              type: boolean
            brand:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            publisher:
              oneOf:
                - type: integer
                - type: string
              example: string or id
    ItemResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ItemResponseDataObject"
        meta: {}
    ItemResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Item"
    ItemListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Item"
    ItemListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ItemListResponseDataItem"
        meta:
          type: object
          properties:
            links:
              type: object
              properties:
                slef:
                  type: string
                saller:
                  type: string
                subcategory:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    ItemsDetail:
      allOf:
        - type: object
          required:
            - description
            - images
            - ContactNumber
          properties:
            description:
              type: string
            images:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/Image"
            ContactNumber:
              type: string
              pattern: ^\d*$
              example: "123456789"
            whatsappNumber:
              type: string
              pattern: ^\d*$
              example: "123456789"
            email:
              type: string
              format: email
            address:
              type: string
            latitude:
              type: string
              pattern: ^\d*$
              example: "123456789"
            longitude:
              type: string
              pattern: ^\d*$
              example: "123456789"
        - $ref: "#/components/schemas/Timestamp"
    ItemsDetailRequest:
      type: object
      required:
        - data
      properties:
        data:
          required:
            - description
            - images
            - ContactNumber
          type: object
          properties:
            userId:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            description:
              type: string
            images:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            ContactNumber:
              type: string
              pattern: ^\d*$
              example: "123456789"
            whatsappNumber:
              type: string
              pattern: ^\d*$
              example: "123456789"
            email:
              type: string
              format: email
            address:
              type: string
            latitude:
              type: string
              pattern: ^\d*$
              example: "123456789"
            longitude:
              type: string
              pattern: ^\d*$
              example: "123456789"
            metadata:
              oneOf:
                - type: integer
                - type: string
              example: string or id
    ItemsDetailResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/ItemsDetail"
    ItemsDetailResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ItemsDetailResponseDataObject"
        meta:
          type: object
    ItemsDetailListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/ItemsDetail"
    ItemsDetailListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ItemsDetailListResponseDataItem"
        meta:
          type: object
          properties:
            links:
              type: object
              properties:
                item:
                  type: string
                saller:
                  type: string
                subcategory:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    ItemSuggestionRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            userId:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            categories:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            subcategories:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            brands:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
    ItemSuggestionListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/ItemSuggestion"
    ItemSuggestionListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ItemSuggestionListResponseDataItem"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/Pagination"
    ItemSuggestion:
      allOf:
        - type: object
          properties:
            categories:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/CategoryResponseDataObject"
            subcategories:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/SubcategoryResponseDataObject"
            brands:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/BrandResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    ItemSuggestionResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/ItemSuggestion"
    ItemSuggestionResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ItemSuggestionResponseDataObject"
        meta:
          type: object
    Comment:
      allOf:
        - type: object
          properties:
            content:
              type: string
            item:
              type: string
            user:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/UserDTO"
            replays:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/ReplayResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    CommentListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Comment"
    CommentListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CommentListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
                saller:
                  type: string
                author:
                  type: string
                subcategory:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    CommentRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            content:
              type: string
            item:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            user:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            replays:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
    CommentResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/CommentResponseDataObject"
        meta:
          type: object
    CommentResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Comment"
    ReplayRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            content:
              type: string
            user:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            comment:
              oneOf:
                - type: integer
                - type: string
              example: string or id
    ReplayListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Replay"
    ReplayListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ReplayListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
                saller:
                  type: string
                commentAuthor:
                  type: string
                author:
                  type: string
                subcategory:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    Replay:
      allOf:
        - type: object
          properties:
            content:
              type: string
            user:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/UserDTO"
            comment:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/CommentResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    ReplayResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Replay"
    ReplayResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ReplayResponseDataObject"
        meta:
          type: object
    CategoryRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            slug:
              type: string
            image:
              type: object
              oneOf:
                - type: integer
                - type: string
              example: string or id
            cover_image:
              type: object
              oneOf:
                - type: integer
                - type: string
              example: string or id
            priority:
              type: integer
            subcategories:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            featured:
              type: boolean
            attribute_categories:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
    CategoryListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Category"
    CategoryListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CategoryListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    CityListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/City"
    CityListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CityListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
                state:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    Category:
      allOf:
        - type: object
          properties:
            name:
              type: string
            slug:
              type: string
            thumbnail:
              $ref: "#/components/schemas/Image"
            cover_image:
              $ref: "#/components/schemas/Image"
            priority:
              type: integer
            subcategories:
              $ref: "#/components/schemas/SubcategoryResponseDataObject"
            featured:
              type: boolean
            attribute_categories:
              $ref: "#/components/schemas/ArrayTypeRelationId"
        - $ref: "#/components/schemas/MetadataResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    CategoryResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Category"
    CategoryResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/CategoryResponseDataObject"
        meta: {}
    SubcategoryRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            slug:
              type: string
            category:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            image:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            cover_image:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            priority:
              type: integer
            items:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            is_brand:
              type: boolean
            attributes:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
    SubcategoryListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Subcategory"
    SubcategoryListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/SubcategoryListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
                parentCategory:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    Subcategory:
      allOf:
        - type: object
          properties:
            name:
              type: string
            slug:
              type: string
            category:
              $ref: "#/components/schemas/CategoryResponseDataObject"
            image:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/Image"
            cover_image:
              $ref: "#/components/schemas/Image"
            priority:
              type: integer
            items:
              $ref: "#/components/schemas/ArrayTypeRelationId"
            is_brand:
              type: boolean
            attributes:
              $ref: "#/components/schemas/ArrayTypeRelationId"
        - $ref: "#/components/schemas/MetadataResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    SubcategoryResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Subcategory"
    SubcategoryResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/SubcategoryResponseDataObject"
        meta: {}
    CountryRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            flag_image:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            code:
              type: string
            states:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
    CountryListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Country"
    CountryListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CountryListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    Country:
      allOf:
        - type: object
          properties:
            name:
              type: string
            flag_image:
              $ref: "#/components/schemas/Image"
            states:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/CountryResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    CountryResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Country"
    CountryResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/CountryResponseDataObject"
        meta:
          type: object
    StateRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            image:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            priority:
              type: integer
            cities:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            country:
              oneOf:
                - type: integer
                - type: string
              example: string or id
    StateListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/State"
    StateListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/StateListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
                country:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    State:
      allOf:
        - type: object
          properties:
            name:
              type: string
            image:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/Image"
            priority:
              type: integer
            cities:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/CityResponseDataObject"
            country:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    id:
                      type: number
                      properties: {}
        - $ref: "#/components/schemas/MetadataResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    StateResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/State"
    StateResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/StateResponseDataObject"
        meta:
          type: object
    CityRequest:
      type: object
      required:
        - data
      properties:
        data:
          required:
            - name
          type: object
          properties:
            name:
              type: string
            state:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            priority:
              type: integer
            item:
              oneOf:
                - type: integer
                - type: string
              example: string or id
    City:
      allOf:
        - type: object
          required:
            - name
          properties:
            name:
              type: string
            state:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/StateResponseDataObject"
            priority:
              type: integer
            item:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    id:
                      type: number
                      properties: {}
        - $ref: "#/components/schemas/MetadataResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    CityResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/City"
    CityResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/CityResponseDataObject"
        meta:
          type: object
    BrandRequest:
      type: object
      required:
        - data
      properties:
        data:
          required:
            - name
          type: object
          properties:
            name:
              type: string
            slug:
              type: string
            image:
              type: string
            cover_image:
              type: string
            description:
              type: string
            priority:
              type: integer
            attributes:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            attribute_value:
              oneOf:
                - type: integer
                - type: string
              example: string or id
    BrandListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Brand"
    BrandListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BrandListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    Brand:
      allOf:
        - type: object
          required:
            - name
          properties:
            name:
              type: string
            slug:
              type: string
            image:
              $ref: "#/components/schemas/Image"
            cover_image:
              $ref: "#/components/schemas/Image"
            description:
              type: string
            priority:
              type: integer
            attributes:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/AttributeResponseDataObject"
            attribute_value:
              $ref: "#/components/schemas/ArrayTypeRelationId"
        - $ref: "#/components/schemas/MetadataResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    BrandResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Brand"
    BrandResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/BrandResponseDataObject"
        meta: {}
    AttributeRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            attribute_values:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            subcategories:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            brands:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
    AttributeListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Attribute"
    AttributeListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AttributeListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
                relatedCategory:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    Attribute:
      allOf:
        - type: object
          properties:
            name:
              type: string
            attribute_values:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/AttributeValueResponseDataObject"
            subcategories:
              $ref: "#/components/schemas/SubcategoryResponseDataObject"
            brands:
              $ref: "#/components/schemas/ArrayTypeRelationId"
        - $ref: "#/components/schemas/Timestamp"
    AttributeResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Attribute"
    AttributeResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AttributeResponseDataObject"
        meta:
          type: object
    AttributeCategoryRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            categories:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
    AttributeCategoryListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/AttributeCategory"
    AttributeCategoryListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AttributeCategoryListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    AttributeCategory:
      allOf:
        - type: object
          properties:
            name:
              type: string
            categories:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/CategoryResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    AttributeCategoryResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/AttributeCategory"
    AttributeCategoryResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AttributeCategoryResponseDataObject"
        meta:
          type: object
    AttributeValueRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            color_code:
              type: string
            attribute:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            value:
              type: string
            brands:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
    AttributeValueListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/AttributeValue"
    AttributeValueListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AttributeValueListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
                attribute:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    AttributeValue:
      allOf:
        - type: object
          properties:
            name:
              type: string
            attribute:
              $ref: "#/components/schemas/AttributeResponseDataObject"
            value:
              type: string
            brands:
              $ref: "#/components/schemas/ArrayTypeRelationId"
        - $ref: "#/components/schemas/Timestamp"
    AttributeValueResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/AttributeValue"
    AttributeValueResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AttributeValueResponseDataObject"
        meta:
          type: object
    UploadFileListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/UploadFile"
    UploadFileListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/UploadFileListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    UploadFile:
      allOf:
        - type: object
          required:
            - name
            - size
            - url
          properties:
            name:
              type: string
            alternativeText:
              type: string
            caption:
              type: string
            width:
              type: integer
            height:
              type: integer
            size:
              type: number
              format: float
            url:
              type: string
            previewUrl:
              type: string
        - $ref: "#/components/schemas/Timestamp"
    UploadFileResponseDataObject:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/UploadFile"
    UploadFileResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/UploadFileResponseDataObject"
        meta:
          type: object
    MetadataRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            metaDescription:
              type: string
            metaTitle:
              type: string
            metaImage:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            metaKeyword:
              type: array
              items:
                type: string
    MetadataListResponseDataItem:
      type: object
      properties:
        id:
          type: number
        data:
          $ref: "#/components/schemas/Metadata"
    MetadataListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MetadataListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    Metadata:
      allOf:
        - type: object
          properties:
            metaDescription:
              type: string
            metaTitle:
              type: string
            metaImage:
              $ref: "#/components/schemas/Image"
            metaKeyword:
              type: string
        - $ref: "#/components/schemas/Timestamp"
    MetadataResponseDataObject:
      type: object
      properties:
        id:
          type: number
        metaData:
          $ref: "#/components/schemas/Metadata"
    MetadataResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/MetadataResponseDataObject"
        meta:
          type: object
  parameters:
    id:
      name: id
      in: path
      description: ""
      deprecated: false
      required: true
      schema:
        type: number
    sortParams:
      name: sort
      in: query
      description: Sort by attributes ascending (name:asc) or descending (name:desc)
      deprecated: false
      required: false
      schema:
        type: string
    fields:
      name: fields
      in: query
      description: "Fields to return (ex: name,description)"
      deprecated: false
      required: false
      schema:
        type: string
    populate:
      name: populate
      in: query
      description: Relations to return
      deprecated: false
      required: false
      schema:
        type: string
    filters:
      name: filters
      in: query
      description: 'Filters to apply {"name":"Item"}'
      deprecated: false
      required: false
      schema:
        oneOf:
          - type: object
          - type: string

      style: deepObject
    search:
      name: search
      in: query
      description: "Search by Fields"
      deprecated: false
      required: false
      schema:
        type: string
    locale:
      name: locale
      in: query
      description: Locale to apply
      deprecated: false
      required: false
      schema:
        type: string
    paginationPage:
      name: "pageNumber"
      in: query
      description: "Page number (default: 0)"
      deprecated: false
      required: false
      schema:
        type: integer
    paginationPageSize:
      name: "pageSize"
      in: query
      description: "Page size (default: 25)"
      deprecated: false
      required: false
      schema:
        type: integer
    paginationStart:
      name: "pageStart"
      in: query
      description: "Offset value (default: 0)"
      deprecated: false
      required: false
      schema:
        type: integer
    paginationLimit:
      name: "pageLimit"
      in: query
      description: "Number of entities to return (default: 25)"
      deprecated: false
      required: false
      schema:
        type: integer
  responses:
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "404":
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "500":
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
