openapi: 3.0.0
info:
  version: 1.0.0
  title: Kollsh API
  description: ""
  termsOfService: "https://kollsh.com/trams-service"
  contact:
    name: Ibrahim Sifat
    email: ibrahimsifat.me@gmail.com
    url: "https://ibrahimsifat.me"
  license:
    name: Apache 2.0
    url: "https://www.apache.org/licenses/LICENSE-2.0.html"
  x-generation-date: "2023-06-18T17:15:24.085Z"
servers:
  - description: Development server
    url: "http://localhost:4000/api/v1/"
paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Returns ok
      responses:
        "200":
          description: Returns ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  ok:
                    type: string
                    enum:
                      - "true"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/local/login:
    post:
      tags:
        - Auth
      summary: Local login
      description: Returns a jwt token and user info
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                identifier:
                  type: string
                password:
                  type: string
            example:
              identifier: username or email
              password: Test1234
        required: true
      responses:
        "200":
          description: Connection
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegistration"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/local/register:
    post:
      tags:
        - Auth
      summary: Register a user
      description: Returns a Success Massage for email verification
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                username:
                  type: string
                email:
                  type: string
                password:
                  type: string
            example:
              name: Ibrahim Sifat
              username: username
              email: ibsifat900@gmail.com
              password: Test1234
        required: true
      responses:
        "201":
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: "Registration successful. Please check your email for verification link"
        "400":
          $ref: "#/components/responses/400"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/forgot-password:
    post:
      tags:
        - Auth
      summary: Send rest password email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
            example:
              email: user@kollsh.com
      responses:
        "200":
          description: Returns ok
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  message:
                    type: string
                    example: "Email sent successfully"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/reset-password:
    post:
      tags:
        - Auth
      summary: Rest user password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                passwordConfirmation:
                  type: string
                code:
                  type: string
            example:
              password: Test1234
              passwordConfirmation: Test1234
              code: zertyoaizndoianzodianzdonaizdoinaozdnia
      responses:
        "200":
          description: Returns a jwt token and user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegistration"
        "400":
          $ref: "#/components/responses/400"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/change-password:
    post:
      tags:
        - Auth
      summary: Update user's own password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - password
                - currentPassword
                - passwordConfirmation
              properties:
                password:
                  type: string
                currentPassword:
                  type: string
                passwordConfirmation:
                  type: string
      responses:
        "200":
          description: Returns a jwt token and user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegistration"
        "400":
          $ref: "#/components/responses/400"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/send-email-confirmation:
    post:
      tags:
        - Auth
      summary: Send confirmation email
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
      responses:
        "200":
          description: Returns email and boolean to confirm email was sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  email:
                    type: string
                    example: "Verification email sent successfully"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/email-confirmation:
    get:
      tags:
        - Auth
      summary: Confirm user email
      parameters:
        - in: query
          name: code
          schema:
            type: string
          description: confirmation token received by email
      responses:
        "200":
          description: Return accessToken with userDTO
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserRegistration"
        "400":
          $ref: "#/components/responses/400"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/reset-password-attempts:
    get:
      tags:
        - Auth
      summary: Get reset password attempts
      parameters:
        - $ref: "#/components/parameters/emailQueryParam"
      responses:
        "200":
          description: Returns reset password attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  resetPasswordAttempts:
                    type: number
                    example: 0
        "400":
          $ref: "#/components/responses/400"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /auth/email-confirmation-attempts:
    get:
      tags:
        - Auth
      summary: Confirm user email
      parameters:
        - $ref: "#/components/parameters/emailQueryParam"
      responses:
        "200":
          description: Returns reset password attempts
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 200
                  resetPasswordAttempts:
                    type: number
                    example: 0
        "400":
          $ref: "#/components/responses/400"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /items:
    get:
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item

      operationId: get/items
    post:
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
    delete:
      responses:
        "202":
          description: "example(5) Items Deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 202
                  message:
                    type: string
                    example: "5 Items Deleted"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsRequestObject"
      security:
        - bearerAuth: []
      operationId: "delete/items"
  /items/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/queryIdParam"
      operationId: "get/items/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/items/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemRequest"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "patch/items/{id}"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchItemRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/items/{id}"
  /items/{id}/seller:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/items/{id}/seller"
  /item-details:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsDetailListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-details
      summary: get all items details
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/item-details
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsDetailResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-details
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/item-details
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemsDetailRequest"
  /item-details/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsDetailResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-details
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/item-details/{id}"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemsDetailResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-details
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "patch/item-details/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemsDetailRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-details
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/item-details/{id}"
  /items/:id/comments:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-details
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: "get/item-details/:id/comments"
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-details
      security:
        - bearerAuth: []
      parameters: []
      operationId: "post/item-details/{id}/comments"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
  /roles:
    get:
      summary: Get all roles
      tags:
        - Roles
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of roles
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RolesListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    post:
      summary: Create a new role
      tags:
        - Roles
      security:
        - bearerAuth: []
      requestBody:
        description: Role object to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequest"
      responses:
        "201":
          description: Role created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
    delete:
      responses:
        "202":
          description: "example(5) Roles Deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 202
                  message:
                    type: string
                    example: "5 Roles Deleted"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Roles
      summary: delete may roles
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsRequestObject"
      security:
        - bearerAuth: []
      operationId: "delete/roles"
  /roles/{id}:
    get:
      summary: Get a role by ID
      tags:
        - Roles
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/queryIdParam"
      responses:
        "200":
          description: A role object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResponseDataObject"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/401"
    put:
      summary: Update a role by ID
      tags:
        - Roles
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        description: Role object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RoleRequest"
      responses:
        "200":
          description: Role updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Role"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/401"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RoleResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Roles
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "patch/roles/{id}"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchRoleRequest"
    delete:
      summary: Delete a role by ID
      tags:
        - Roles
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/roles/{id}"
      responses:
        "204":
          description: Role deleted successfully
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/401"
  /permissions:
    get:
      summary: Get all permissions
      tags:
        - Permissions
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      security:
        - bearerAuth: []
      responses:
        "200":
          description: A list of permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionsListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
    post:
      summary: Create a new permission
      tags:
        - Permissions
      security:
        - bearerAuth: []
      requestBody:
        description: Permission object to be added
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PermissionRequest"
      responses:
        "201":
          description: Permission created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
    delete:
      responses:
        "202":
          description: "example(5) Permissions Deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 202
                  message:
                    type: string
                    example: "5 Permissions Deleted"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Permissions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsRequestObject"
      security:
        - bearerAuth: []
      operationId: "delete/permissions"
  /permissions/{id}:
    get:
      summary: Get a permission by ID
      tags:
        - Permissions
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/permissions/{id}"
      responses:
        "200":
          description: A permission object
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionResponseDataObject"
    put:
      summary: Update a permission by ID
      tags:
        - Permissions
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/permissions/{id}"
      requestBody:
        description: Permission object to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PermissionRequest"
      responses:
        "200":
          description: Permission updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PermissionResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Permissions
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "patch/permissions/{id}"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PatchPermissionRequest"
    delete:
      summary: Delete a permission by ID
      tags:
        - Permissions
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/permissions/{id}"
      responses:
        "204":
          description: Permission deleted successfully
        "401":
          $ref: "#/components/responses/401"
        "404":
          $ref: "#/components/responses/404"
  /upload/files:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadFileListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Upload - File
      summary: get all files/images
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/upload/files
    post:
      summary: Upload an image/file
      tags:
        - Upload - File
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/ImageRequest"
      security:
        - bearerAuth: []
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 201
                  message:
                    type: string
                    example: "file uploaded successfully"
                  uploadedThumbnailId:
                    type: string
                    example: 6502d517703a924c39996ca5
        "400":
          $ref: "#/components/responses/400"
        "500":
          $ref: "#/components/responses/500"

      operationId: post/upload/files
  /upload/files/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UploadFileResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Upload - File
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/upload/files/{id}"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Upload - File
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/upload/files/{id}"
  /comments:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Comment
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/comments
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Comment
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
    delete:
      responses:
        "202":
          description: "example(5) Comments Deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 202
                  message:
                    type: string
                    example: "5 Comments Deleted"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsRequestObject"
      security:
        - bearerAuth: []
      operationId: "delete/comments"
  /comments/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Comment
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/comments/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Comment
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/comments/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CommentResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Comment
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "patch/comments/{id}"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CommentRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Comment
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/comments/{id}"
  /attributes:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/attributes
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/attributes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeRequest"
  /attributes/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/attributes/{id}"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/attributes/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/attributes/{id}"
  /attribute-categories:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeCategoryListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-category
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/attribute-categories
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeCategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-category
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/attribute-categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeCategoryRequest"
  /attribute-categories/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeCategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-category
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/attribute-categories/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeCategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-category
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/attribute-categories/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeCategoryRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-category
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/attribute-categories/{id}"
  /attribute-values:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeValueListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-value
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/attribute-values
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeValueResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-value
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/attribute-values
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeValueRequest"
  /attribute-values/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeValueResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-value
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/attribute-values/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AttributeValueResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-value
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/attribute-values/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AttributeValueRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Attribute-value
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/attribute-values/{id}"
  /brands:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Brand
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/brands
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Brand
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/brands
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandRequest"
    delete:
      responses:
        "202":
          description: "example(5) Brands Deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 202
                  message:
                    type: string
                    example: "5 Brands Deleted"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Brand
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsRequestObject"
      security:
        - bearerAuth: []
      operationId: "delete/brands"
  /brands/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandResponseDataObject"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Brand
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/brands/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Brand
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/brands/{id}"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandRequest"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BrandResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Brand
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "patch/brands/{id}"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/BrandPatchRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Brand
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/brands/{id}"
  /categories:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Category
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/categories
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Category
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequest"
    delete:
      responses:
        "202":
          description: "example(5) Categories Deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 202
                  message:
                    type: string
                    example: "5 Categories Deleted"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsRequestObject"
      security:
        - bearerAuth: []
      operationId: "delete/categories"
  /categories/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponseDataObject"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Category
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/categories/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Category
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/categories/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryRequest"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Category
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "patch/categories/{id}"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CategoryPatchRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Category
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/categories/{id}"
  /cities:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CityListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - City
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/cities
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CityResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - City
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/cities
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CityRequest"
    delete:
      responses:
        "202":
          description: "example(5) Cities Deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 202
                  message:
                    type: string
                    example: "5 Cities Deleted"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - City
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsRequestObject"
      security:
        - bearerAuth: []
      operationId: "delete/cities"
  /cities/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CityResponseDataObject"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - City
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/populate"

      operationId: "get/cities/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CityResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - City
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/cities/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CityRequest"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CityResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - City
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "patch/cities/{id}"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CityPatchRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - City
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/cities/{id}"
  /countries:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountryListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Country
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/countries
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Country
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/countries
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CountryRequest"
    delete:
      responses:
        "202":
          description: "example(5) Country Deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 202
                  message:
                    type: string
                    example: "5 Country Deleted"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Country
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsRequestObject"
      security:
        - bearerAuth: []
      operationId: "delete/countries"
  /countries/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountryResponseDataObject"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Country
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/countries/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Country
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/countries/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CountryRequest"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/CountryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Country
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "patch/countries/{id}"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CountryPatchRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Country
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/countries/{id}"
  /replays:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplayListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Replay
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/replays
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplayResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Replay
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/replays
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplayRequest"
  /replays/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplayResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Replay
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/replays/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReplayResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Replay
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/replays/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReplayRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Replay
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: ""
          deprecated: false
          required: true
          schema:
            type: number
      operationId: "delete/replays/{id}"
  /subcategories:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubcategoryListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Subcategory
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/subcategories
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubcategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Subcategory
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/subcategories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubcategoryRequest"
    delete:
      responses:
        "202":
          description: "example(5) Subcategories Deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 202
                  message:
                    type: string
                    example: "5 Subcategories Deleted"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Subcategory
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsRequestObject"
      security:
        - bearerAuth: []
      operationId: "delete/subcategories"
  /subcategories/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubcategoryResponseDataObject"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Subcategory
      parameters:
        - $ref: "#/components/parameters/id"
        - $ref: "#/components/parameters/queryIdParam"
      operationId: "get/subcategories/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubcategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Subcategory
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/subcategories/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubcategoryRequest"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SubcategoryResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Subcategory
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "patch/subcategories/{id}"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SubcategoryPatchRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Subcategory
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/subcategories/{id}"
  /states:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - State
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/states
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - State
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/states
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateRequest"
    delete:
      responses:
        "202":
          description: "example(5) State Deleted"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: number
                    example: 202
                  message:
                    type: string
                    example: "5 State Deleted"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - State
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdsRequestObject"
      security:
        - bearerAuth: []
      operationId: "delete/states"
  /states/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponseDataObject"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - State
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/states/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - State
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/states/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StateRequest"
    patch:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StateResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - State
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "patch/states/{id}"
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StatePatchRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - State
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/states/{id}"
  /users:
    get:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Get list of users
      responses:
        "200":
          description: Returns an array of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDTO"
              example:
                - $ref: "#/components/schemas/UserDTO"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - User
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
            example:
              username: ibrahim
              email: hello@kollsh.com
              password: password
      responses:
        "201":
          description: Returns created user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                $ref: "#/components/schemas/UserDTO"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}:
    get:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Get a user
      parameters:
        - $ref: "#/components/parameters/id"
      responses:
        "200":
          description: Returns a user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                $ref: "#/components/schemas/UserDTO"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Update a user
      parameters:
        - $ref: "#/components/parameters/id"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                email:
                  type: string
                username:
                  type: string
                password:
                  type: string
            example:
              username: username
              email: user@kollsh.com
              password: Password
      responses:
        "200":
          description: Returns updated user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                $ref: "#/components/schemas/UserDTO"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Delete a user
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: user Id
      responses:
        "202":
          $ref: "#/components/responses/202"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/me:
    get:
      tags:
        - User
      security:
        - bearerAuth: []
      summary: Get authenticated user info
      responses:
        "200":
          description: Returns user info
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDTO"
              example:
                $ref: "#/components/schemas/UserDTO"
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /item-suggestions:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemSuggestionListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-suggestion
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/item-suggestions
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemSuggestionResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-suggestion
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/item-suggestions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemSuggestionRequest"
  /item-suggestions/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemSuggestionResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-suggestion
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/item-suggestions/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ItemSuggestionResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-suggestion
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/item-suggestions/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ItemSuggestionRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Item-suggestion
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/item-suggestions/{id}"
  /metadatas:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataListResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Metadata
      parameters:
        - $ref: "#/components/parameters/sortParams"
        - $ref: "#/components/parameters/paginationPage"
        - $ref: "#/components/parameters/paginationPageSize"
        - $ref: "#/components/parameters/paginationStart"
        - $ref: "#/components/parameters/fields"
        - $ref: "#/components/parameters/populate"
        - $ref: "#/components/parameters/search"
        - $ref: "#/components/parameters/locale"
      operationId: get/metadatas
    post:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Metadata
      security:
        - bearerAuth: []
      parameters: []
      operationId: post/seos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataRequest"
  /metadatas/{id}:
    get:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataResponse"
        "400":
          $ref: "#/components/responses/400"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Metadata
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "get/seos/{id}"
    put:
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MetadataResponse"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Metadata
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "put/seos/{id}"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MetadataRequest"
    delete:
      responses:
        "202":
          $ref: "#/components/responses/202"
        "400":
          $ref: "#/components/responses/400"
        "401":
          $ref: "#/components/responses/401"
        "403":
          $ref: "#/components/responses/403"
        "404":
          $ref: "#/components/responses/404"
        "500":
          $ref: "#/components/responses/500"
      tags:
        - Metadata
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/id"
      operationId: "delete/metadatas/{id}"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Error:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
        name:
          type: string
        message:
          type: string
        details:
          type: object
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        # createdBy:
        #   type: object
        #   oneOf:
        #     - $ref: "#/components/schemas/MongoDBObjectId"
        #     - $ref: "#/components/schemas/UserDTO"
        # updatedBy:
        #   type: object
        #   oneOf:
        #     - $ref: "#/components/schemas/MongoDBObjectId"
        #     - $ref: "#/components/schemas/UserDTO"
    Image:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        asset_id:
          type: string
        public_id:
          type: string
        alternativeText:
          type: string
        caption:
          type: string
        width:
          type: integer
        height:
          type: integer
        folder:
          type: string
        resource_type:
          type: string
        format:
          type: string
        size:
          type: number
          format: float
        url:
          type: string
        previewUrl:
          type: string
      required:
        - alternativeText
        - url
        - previewUrl
    ImageRequest:
      type: object
      properties:
        thumbnail:
          type: string
          format: binary
      required:
        - thumbnail
    UserDTO:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        name:
          type: string
          example: Ibrahim
        username:
          type: string
          example: username
        email:
          type: string
          example: username@kullosh.com
        avatar:
          type: string
          example: "64c0e03779da93002b059be0"
        confirmed:
          type: boolean
          example: true
        blocked:
          type: boolean
          example: false
      required:
        - id
    Pagination:
      type: object
      properties:
        page:
          type: integer
        pageSize:
          type: integer
          minimum: 25
        pageCount:
          type: integer
          maximum: 1
        totalPage:
          type: integer
        totalItems:
          type: integer
    AppliedFilters:
      type: object
      properties:
        sortCriteria:
          type: object
        selectedFields:
          type: array
          properties:
            item:
              type: string
              example: name
        populatedFields:
          type: array
          properties:
            item:
              type: string
              example: comment
        searchQuery:
          type: array
          properties:
            item:
              type: string
              example: anything
    ArrayTypeRelationId:
      type: object
      properties:
        data:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: "#/components/schemas/MongoDBObjectId"
              data:
                type: object
                properties: {}
    ObjectTypeRelationId:
      type: object
      properties:
        data:
          type: object
          properties:
            id:
              $ref: "#/components/schemas/MongoDBObjectId"
            data:
              type: object
              properties: {}
    User:
      type: object
      required:
        - username
        - email
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
        resetPasswordToken:
          type: string
        confirmationToken:
          type: string
        confirmed:
          type: boolean
        blocked:
          type: boolean
        role:
          type: object
        items:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties:
                  id:
                    $ref: "#/components/schemas/MongoDBObjectId"
                  data:
                    type: object
                    properties: {}
        comments:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties: {}
        replays:
          type: object
          properties:
            data:
              type: array
              items:
                type: object
                properties: {}
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
    UserResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/UsersResponseDataObject"
        meta:
          type: object
    UsersResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/UserDTO"
    UserRegistration:
      type: object
      properties:
        message:
          type: string
          example: success
        accessToken:
          type: string
          example: >-
            eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InRoaXNpc25hbWUiLCJlbWFpbCI6Imlic2lmYXQ5MDBAZ21haWwuY29tIiwicm9sZSI6IjY0ZjQwZGY4OTA4MDA3ZDFjYjFhMGZhOSIsImJsb2NrZWQiOmZhbHNlLCJjb25maXJtZWQiOnRydWUsImlhdCI6MTY5Mzc1OTgyMSwiZXhwIjoxNjkzNzYzNDIxfQ.Xd2r3DHdDLCIUl5TxiZD7LxrcxshLl_sfmf0CjgmHXY
        user:
          $ref: "#/components/schemas/UserDTO"
    Item:
      allOf:
        - type: object
          properties:
            name:
              type: string
            description:
              type: string
            released:
              type: string
              format: date
            thumbnail:
              oneOf:
                - type: string
                - $ref: "#/components/schemas/Image"
            slug:
              type: string
            subcategory:
              oneOf:
                - $ref: "#/components/schemas/SubcategoryResponseDataObject"
                - type: string
            state:
              oneOf:
                - $ref: "#/components/schemas/ObjectTypeRelationId"
                - type: string
            cities:
              type: array
              items:
                oneOf:
                  - $ref: "#/components/schemas/ArrayTypeRelationId"
                  - type: string
            price:
              type: integer
            negotiable:
              type: boolean
            is_argent:
              type: boolean
            brand:
              oneOf:
                - $ref: "#/components/schemas/ObjectTypeRelationId"
                - type: string
            seller:
              oneOf:
                - $ref: "#/components/schemas/ObjectTypeRelationId"
                - type: string
        - $ref: "#/components/schemas/Timestamp"
    ItemRequest:
      type: object
      required:
        - name
        - description
        - thumbnail
        - subcategory
        - state
        - cities
        - price
      properties:
        name:
          type: string
        description:
          type: string
        released:
          type: string
          format: date
        thumbnail:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        slug:
          type: string
        subcategory:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        state:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        cities:
          type: array
          items:
            oneOf:
              - type: integer
              - type: string
            example: string or id
        price:
          type: integer
        negotiable:
          type: boolean
        is_argent:
          type: boolean
        brand:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        seller:
          oneOf:
            - type: integer
            - type: string
          example: string or id
    PatchItemRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        released:
          type: string
          format: date
        thumbnail:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        slug:
          type: string
        subcategory:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        state:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        cities:
          type: array
          items:
            oneOf:
              - type: integer
              - type: string
            example: string or id
        price:
          type: integer
        negotiable:
          type: boolean
        is_argent:
          type: boolean
        brand:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        seller:
          oneOf:
            - type: integer
            - type: string
          example: string or id
    ItemResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ItemResponseDataObject"
    ItemResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        code:
          type: number
        message:
          type: string
        data:
          $ref: "#/components/schemas/Item"
        links:
          type: object
          properties:
            self:
              type: string
            seller:
              type: string
            comments:
              type: string
    ItemListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Item"
    ItemListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ItemListResponseDataItem"
        meta:
          $ref: "#/components/schemas/ListDataMetaResponse"
    ItemsDetail:
      allOf:
        - type: object
          required:
            - description
            - images
            - ContactNumber
          properties:
            description:
              type: string
            images:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/Image"
            comments:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/CommentResponseDataObject"
            contactNumber:
              type: string
              pattern: ^\d*$
              example: "123456789"
            whatsappNumber:
              type: string
              pattern: ^\d*$
              example: "123456789"
            email:
              type: string
              format: email
            address:
              type: string
            latitude:
              type: string
              pattern: ^\d*$
              example: "123456789"
            longitude:
              type: string
              pattern: ^\d*$
              example: "123456789"
        - $ref: "#/components/schemas/Timestamp"
    ItemsDetailRequest:
      type: object
      properties:
        data:
          required:
            - item
            - description
            - images
            - ContactNumber
          type: object
          properties:
            item:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            description:
              type: string
            images:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            comments:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            ContactNumber:
              type: string
              pattern: ^\d*$
              example: "123456789"
            whatsappNumber:
              type: string
              pattern: ^\d*$
              example: "123456789"
            email:
              type: string
              format: email
            address:
              type: string
            latitude:
              type: string
              pattern: ^\d*$
              example: "123456789"
            longitude:
              type: string
              pattern: ^\d*$
              example: "123456789"
            metadata:
              oneOf:
                - type: integer
                - type: string
              example: string or id
    ItemsDetailResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/ItemsDetail"
    ItemsDetailResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ItemsDetailResponseDataObject"
        meta:
          type: object
    ItemsDetailListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/ItemsDetail"
    ItemsDetailListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ItemsDetailListResponseDataItem"
        meta:
          type: object
          properties:
            links:
              type: object
              properties:
                item:
                  type: string
                seller:
                  type: string
                subcategory:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    ItemSuggestionRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            userId:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            categories:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            subcategories:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            brands:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
    ItemSuggestionListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/ItemSuggestion"
    ItemSuggestionListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ItemSuggestionListResponseDataItem"
        meta:
          type: object
          properties:
            pagination:
              $ref: "#/components/schemas/Pagination"
    ItemSuggestion:
      allOf:
        - type: object
          properties:
            categories:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/CategoryResponseDataObject"
            subcategories:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/SubcategoryResponseDataObject"
            brands:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/BrandResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    ItemSuggestionResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/ItemSuggestion"
    ItemSuggestionResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ItemSuggestionResponseDataObject"
        meta:
          type: object
    Comment:
      allOf:
        - type: object
          properties:
            content:
              type: string
            item:
              type: string
            author:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/UserDTO"
            replays:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/ReplayResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    CommentListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Comment"
    CommentListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CommentListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                self:
                  type: string
                seller:
                  type: string
                author:
                  type: string
                subcategory:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
            appliedFilters:
              $ref: "#/components/schemas/AppliedFilters"
    CommentRequest:
      type: object
      properties:
        content:
          type: string
        item:
          oneOf:
            - type: integer
            - type: string
          example: string or id
    CommentResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/CommentResponseDataObject"
        meta:
          type: object
    CommentResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Comment"
    ReplayRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            content:
              type: string
            user:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            comment:
              oneOf:
                - type: integer
                - type: string
              example: string or id
    ReplayListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Replay"
    ReplayListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/ReplayListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                self:
                  type: string
                seller:
                  type: string
                commentAuthor:
                  type: string
                author:
                  type: string
                subcategory:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    Replay:
      allOf:
        - type: object
          properties:
            content:
              type: string
            user:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/UserDTO"
            comment:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/CommentResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    ReplayResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Replay"
    ReplayResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/ReplayResponseDataObject"
        meta:
          type: object
    CategoryPatchRequest:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        image:
          type: object
          oneOf:
            - type: integer
            - type: string
          example: string or id
        cover_image:
          type: object
          oneOf:
            - type: integer
            - type: string
          example: string or id
        priority:
          type: integer
        subcategories:
          type: array
          items:
            oneOf:
              - type: integer
              - type: string
            example: string or id
        featured:
          type: boolean
        attribute_categories:
          type: array
          items:
            oneOf:
              - type: integer
              - type: string
            example: string or id
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        image:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        cover_image:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        priority:
          type: integer
        featured:
          type: boolean
      required:
        - name
        - image
        - cover_image
        - priority
        - featured
    CategoryListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Category"
    CategoryListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CategoryListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    CityListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/City"
    CityListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CityListResponseDataItem"
        meta:
          type: object
          properties:
            links:
              type: object
              properties:
                self:
                  type: string
                state:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
            appliedFilters:
              $ref: "#/components/schemas/AppliedFilters"
    Category:
      allOf:
        - type: object
          properties:
            name:
              type: string
            slug:
              type: string
            thumbnail:
              $ref: "#/components/schemas/Image"
            cover_image:
              $ref: "#/components/schemas/Image"
            priority:
              type: integer
            subcategories:
              $ref: "#/components/schemas/SubcategoryResponseDataObject"
            featured:
              type: boolean
            attribute_categories:
              $ref: "#/components/schemas/ArrayTypeRelationId"
        - $ref: "#/components/schemas/MetadataResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    CategoryResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Category"
    CategoryResponse:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        data:
          $ref: "#/components/schemas/CategoryResponseDataObject"
        links:
          type: object
          properties:
            self:
              type: string
              example: "http://localhost:4000/states/5f9b9b4b3c9b3c2b1c3b2b1c"
    SubcategoryRequest:
      type: object
      properties:
        name:
          type: string
        category:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        image:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        cover_image:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        priority:
          type: integer
        is_brand:
          type: boolean
        attributes:
          type: array
          items:
            oneOf:
              - type: integer
              - type: string
            example: string or id
      required:
        - name
        - category
        - image
        - cover_image
        - priority
        - is_brand
    SubcategoryPatchRequest:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        category:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        image:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        cover_image:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        priority:
          type: integer
        is_brand:
          type: boolean
        attributes:
          type: array
          items:
            oneOf:
              - type: integer
              - type: string
            example: string or id
    SubcategoryListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Subcategory"
    SubcategoryListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/SubcategoryListResponseDataItem"
        meta:
          type: object
          properties:
            links:
              type: object
              properties:
                self:
                  type: string
                category:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
            appliedFilters:
              $ref: "#/components/schemas/AppliedFilters"
    Subcategory:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        category:
          $ref: "#/components/schemas/CategoryResponseDataObject"
        image:
          $ref: "#/components/schemas/Image"
        cover_image:
          $ref: "#/components/schemas/Image"
        priority:
          type: integer
        is_brand:
          type: boolean
        attributes:
          $ref: "#/components/schemas/ArrayTypeRelationId"
    SubcategoryResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Subcategory"
    SubcategoryResponse:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        data:
          $ref: "#/components/schemas/SubcategoryResponseDataObject"
        links:
          type: object
          properties:
            self:
              type: string
              example: "http://localhost:4000/states/5f9b9b4b3c9b3c2b1c3b2b1c"
            category:
              type: string
              example: "http://localhost:4000/categories/5f9b9b4b3c9b3c2b1c3b2b1c"
    CountryRequest:
      type: object
      properties:
        name:
          type: string
        flag_image:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        code:
          type: string
      required:
        - name
        - flag_image
        - code
    CountryPatchRequest:
      type: object
      properties:
        name:
          type: string
        flag_image:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        code:
          type: string
    CountryListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Country"
    CountryListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/CountryListResponseDataItem"
        meta:
          type: object
          properties:
            links:
              type: object
              properties:
                self:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
            appliedFilters:
              $ref: "#/components/schemas/AppliedFilters"
    Country:
      type: object
      properties:
        name:
          type: string
        flag_image:
          $ref: "#/components/schemas/Image"
        code:
          type: string
        states:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/CountryResponseDataObject"
    CountryResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Country"
    CountryResponse:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        data:
          $ref: "#/components/schemas/CountryResponseDataObject"
        links:
          type: object
          properties:
            self:
              type: string
              example: "http://localhost:4000/states/5f9b9b4b3c9b3c2b1c3b2b1c"
    StateRequest:
      type: object
      properties:
        name:
          type: string
        image:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        priority:
          type: integer
        cities:
          type: array
          items:
            oneOf:
              - type: integer
              - type: string
            example: string or id
        country:
          oneOf:
            - type: integer
            - type: string
          example: string or id
      required:
        - name
        - image
        - country
        - priority
    StatePatchRequest:
      type: object
      properties:
        name:
          type: string
        image:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        priority:
          type: integer
        cities:
          type: array
          items:
            oneOf:
              - type: integer
              - type: string
            example: string or id
        country:
          oneOf:
            - type: integer
            - type: string
          example: string or id
    StateListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/State"
    StateListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/StateListResponseDataItem"
        meta:
          type: object
          properties:
            links:
              type: object
              properties:
                self:
                  type: string
                country:
                  type: string
                cities:
                  type: array
                  items:
                    type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
            appliedFilters:
              $ref: "#/components/schemas/AppliedFilters"
    State:
      type: object
      properties:
        name:
          type: string
        image:
          type: string
          example: "id"
        priority:
          type: integer
        cities:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: "#/components/schemas/CityResponseDataObject"
        country:
          $ref: "#/components/schemas/MongoDBObjectId"
    StateResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/State"
    StateResponse:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        data:
          $ref: "#/components/schemas/StateResponseDataObject"
        links:
          type: object
          properties:
            self:
              type: string
              example: "http://localhost:4000/states/5f9b9b4b3c9b3c2b1c3b2b1c"
    CityPatchRequest:
      type: object
      properties:
        name:
          type: string
        state:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        priority:
          type: integer
    CityRequest:
      type: object
      properties:
        name:
          type: string
        state:
          oneOf:
            - type: integer
            - type: string
          example: string or id
        priority:
          type: integer
      required:
        - name
        - state
        - priority
    City:
      allOf:
        - type: object
          required:
            - name
          properties:
            name:
              type: string
            state:
              type: object
              properties:
                data:
                  $ref: "#/components/schemas/StateResponseDataObject"
            priority:
              type: integer
            item:
              type: object
              properties:
                data:
                  type: object
                  properties:
                    id:
                      $ref: "#/components/schemas/MongoDBObjectId"
                      properties: {}
        - $ref: "#/components/schemas/MetadataResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    CityResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/City"
        links:
          type: object
          properties:
            self:
              type: string
              example: "http://localhost:4000/cities/5f9b9b4b3c9b3c2b1c3b2b1c"
    CityResponse:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        data:
          $ref: "#/components/schemas/CityResponseDataObject"
    BrandPatchRequest:
      type: object
      properties:
        name:
          type: string
        slug:
          type: string
        image:
          type: string
        description:
          type: string
        priority:
          type: integer
        attributes:
          type: array
          items:
            oneOf:
              - type: integer
              - type: string
            example: string or id
    BrandRequest:
      type: object
      properties:
        name:
          type: string
        image:
          type: string
        description:
          type: string
        priority:
          type: integer
        attributes:
          type: array
          items:
            oneOf:
              - type: integer
              - type: string
            example: string or id
      required:
        - name
        - image
        - description
        - priority
    BrandListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Brand"
    BrandListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/BrandListResponseDataItem"
        meta:
          type: object
          properties:
            links:
              type: object
              properties:
                self:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    Brand:
      allOf:
        - type: object
          required:
            - name
          properties:
            name:
              type: string
            slug:
              type: string
            image:
              $ref: "#/components/schemas/Image"
            cover_image:
              $ref: "#/components/schemas/Image"
            description:
              type: string
            priority:
              type: integer
            attributes:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/AttributeResponseDataObject"
            attribute_value:
              $ref: "#/components/schemas/ArrayTypeRelationId"
        - $ref: "#/components/schemas/MetadataResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    BrandResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Brand"
        links:
          type: object
          properties:
            self:
              type: string
              example: "http://localhost:4000/brands/5f9b9b4b3c9b3c2b1c3b2b1c"
    BrandResponse:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        data:
          $ref: "#/components/schemas/BrandResponseDataObject"
    AttributeRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            attribute_values:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            subcategories:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
            brands:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
    AttributeListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Attribute"
    AttributeListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AttributeListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
                relatedCategory:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    Attribute:
      allOf:
        - type: object
          properties:
            name:
              type: string
            attribute_values:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/AttributeValueResponseDataObject"
            subcategories:
              $ref: "#/components/schemas/SubcategoryResponseDataObject"
            brands:
              $ref: "#/components/schemas/ArrayTypeRelationId"
        - $ref: "#/components/schemas/Timestamp"
    AttributeResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Attribute"
    AttributeResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AttributeResponseDataObject"
        meta:
          type: object
    AttributeCategoryRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            categories:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
    AttributeCategoryListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/AttributeCategory"
    AttributeCategoryListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AttributeCategoryListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    AttributeCategory:
      allOf:
        - type: object
          properties:
            name:
              type: string
            categories:
              type: object
              properties:
                data:
                  type: array
                  items:
                    $ref: "#/components/schemas/CategoryResponseDataObject"
        - $ref: "#/components/schemas/Timestamp"
    AttributeCategoryResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/AttributeCategory"
    AttributeCategoryResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AttributeCategoryResponseDataObject"
        meta:
          type: object
    AttributeValueRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            name:
              type: string
            color_code:
              type: string
            attribute:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            value:
              type: string
            brands:
              type: array
              items:
                oneOf:
                  - type: integer
                  - type: string
                example: string or id
    AttributeValueListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/AttributeValue"
    AttributeValueListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/AttributeValueListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
                attribute:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    AttributeValue:
      allOf:
        - type: object
          properties:
            name:
              type: string
            attribute:
              $ref: "#/components/schemas/AttributeResponseDataObject"
            value:
              type: string
            brands:
              $ref: "#/components/schemas/ArrayTypeRelationId"
        - $ref: "#/components/schemas/Timestamp"
    AttributeValueResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/AttributeValue"
    AttributeValueResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AttributeValueResponseDataObject"
        meta:
          type: object
    UploadFileRequest:
      type: object
      properties:
        alternativeText:
          type: string
        file:
          type: string
        fileType:
          type: string
        filename:
          type: string
        folder:
          type: string
      required:
        - file
    UploadFileListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/UploadFile"
    UploadFileListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/UploadFileListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    UploadFile:
      allOf:
        - type: object
          required:
            - alternativeText
            - size
            - url
          properties:
            asset_id:
              type: string
            public_id:
              type: string
            alternativeText:
              type: string
            format:
              type: string
            caption:
              type: string
            folder:
              type: string
            url:
              type: string
            resource_type:
              type: string
            width:
              type: integer
            height:
              type: integer
            size:
              type: number
              format: float
        - $ref: "#/components/schemas/Timestamp"
    UploadFileResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/UploadFile"
    UploadFileResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/UploadFileResponseDataObject"
        meta:
          type: object
    Role:
      type: object
      properties:
        _id:
          $ref: "#/components/schemas/MongoDBObjectId"
          description: The ID of the role
        name:
          type: string
          description: The name of the role
        description:
          type: string
          description: A brief description of the role
        permissions:
          type: array
          items:
            $ref: "#/components/schemas/Permission"
          description: The permissions associated with the role
        createdBy:
          type: string
      required:
        - name
    RoleResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Role"
        links:
          type: object
          properties:
            self:
              type: string
              example: "http://localhost:4000/roles/5f9b9b4b3c9b3c2b1c3b2b1c"
    RoleResponse:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        data:
          $ref: "#/components/schemas/RoleResponseDataObject"
    PatchRoleRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the role
        description:
          type: string
          description: A brief description of the role
        permissions:
          type: array
          items:
            type: string
          description: An array of permission IDs to associate with the role
    RolesListDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Role"
        links:
          type: object
          properties:
            self:
              type: string
              example: "http://localhost:4000/permissions/5f9b9b4b3c9b3c2b1c3b2b1c"
    RolesListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/RolesListDataObject"
        meta:
          $ref: "#/components/schemas/ListDataMetaResponse"
    RoleRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the role
        description:
          type: string
          description: A brief description of the role
        permissions:
          type: array
          items:
            type: string
          description: An array of permission IDs to associate with the role
      required:
        - name
        - description
        - permissions
    Permission:
      type: object
      properties:
        _id:
          type: string
          description: The ID of the permission
        controller:
          type: string
          description: The name of the controller
        actions:
          type: array
          items:
            type: string
          description: The actions allowed by this permission
        description:
          type: string
        createdBy:
          type: string
      required:
        - controller
        - actions
    PermissionResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Permission"
        links:
          type: object
          properties:
            self:
              type: string
              example: "http://localhost:4000/permissions/5f9b9b4b3c9b3c2b1c3b2b1c"
    PermissionResponse:
      type: object
      properties:
        code:
          type: number
        message:
          type: string
        data:
          $ref: "#/components/schemas/PermissionResponseDataObject"
    PatchPermissionRequest:
      type: object
      properties:
        controller:
          type: string
          description: The name of the controller
        actions:
          type: array
          items:
            type: string
          description: The actions allowed by this permission
        description:
          type: string
    PermissionsListDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Permission"
    PermissionsListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/PermissionsListDataObject"
        meta:
          $ref: "#/components/schemas/ListDataMetaResponse"
    PermissionRequest:
      type: object
      properties:
        controller:
          type: string
          description: The name of the controller
        actions:
          type: array
          items:
            type: string
          description: The actions allowed by this permission
        description:
          type: string
      required:
        - controller
        - actions
        - description
    MetadataRequest:
      type: object
      required:
        - data
      properties:
        data:
          type: object
          properties:
            metaDescription:
              type: string
            metaTitle:
              type: string
            metaImage:
              oneOf:
                - type: integer
                - type: string
              example: string or id
            metaKeyword:
              type: array
              items:
                type: string
    MetadataListResponseDataItem:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        data:
          $ref: "#/components/schemas/Metadata"
    MetadataListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/MetadataListResponseDataItem"
        meta:
          type: object
          properties:
            item:
              type: object
              properties:
                slef:
                  type: string
            pagination:
              $ref: "#/components/schemas/Pagination"
    Metadata:
      allOf:
        - type: object
          properties:
            metaDescription:
              type: string
            metaTitle:
              type: string
            metaImage:
              $ref: "#/components/schemas/Image"
            metaKeyword:
              type: string
        - $ref: "#/components/schemas/Timestamp"
    MetadataResponseDataObject:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/MongoDBObjectId"
        metaData:
          $ref: "#/components/schemas/Metadata"
    MetadataResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/MetadataResponseDataObject"
        meta:
          type: object
    IdsRequestObject:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
    MongoDBObjectId:
      oneOf:
        - type: string
        - type: object
    ListDataMetaResponse:
      type: object
      properties:
        links:
          type: object
          properties:
            self:
              type: string
            nextPage:
              type: string
            prevPage:
              type: string
        pagination:
          $ref: "#/components/schemas/Pagination"
        appliedFilters:
          $ref: "#/components/schemas/AppliedFilters"
  parameters:
    id:
      name: id
      in: path
      description: ""
      deprecated: false
      required: true
      schema:
        type: string
    slug:
      name: slug
      in: path
      description: ""
      required: true
      schema:
        type: string
    queryIdParam:
      name: populate
      in: query
      description: populate relations
      schema:
        type: string
        example: "user"
    emailQueryParam:
      name: email
      in: query
      required: true
      description: email to search
      schema:
        type: string
        example: "ibsifat900@gmail.com"
    sortParams:
      name: sort
      in: query
      description: Sort by attributes (name:asc) or (name:desc)(default:updatedAt:desc)
      deprecated: false
      schema:
        type: string
    fields:
      name: fields
      in: query
      description: "Fields to return (ex: name,description)"
      deprecated: false
      required: false
      schema:
        type: string
    populate:
      name: populate
      in: query
      description: Relations to return
      deprecated: false
      required: false
      schema:
        type: string
    search:
      name: search
      in: query
      description: 'search with selected fields {"name":"anything"}'
      deprecated: false
      required: false
      schema:
        oneOf:
          - type: object
          - type: string
      style: deepObject
    locale:
      name: locale
      in: query
      description: Locale to apply
      deprecated: false
      required: false
      schema:
        type: string
    paginationPage:
      name: "pageNumber"
      in: query
      description: "Page number (default: 1)"
      deprecated: false
      required: false
      schema:
        type: integer
    paginationPageSize:
      name: "pageSize"
      in: query
      description: "Page size (default: 25)"
      deprecated: false
      required: false
      schema:
        type: integer
    paginationStart:
      name: "pageStart"
      in: query
      description: "Offset value (default: 0)"
      deprecated: false
      required: false
      schema:
        type: integer
    # paginationLimit:
    #   name: "pageLimit"
    #   in: query
    #   description: "Number of entities to return (default: 25)"
    #   deprecated: false
    #   required: false
    #   schema:
    #     type: integer
  responses:
    "202":
      description: OK
      content:
        application/json:
          schema:
            type: string
            example: ok
    "400":
      description: Bad Request
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "401":
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "403":
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "404":
      description: Not Found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "413":
      description: Payload Too Large
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    "500":
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
